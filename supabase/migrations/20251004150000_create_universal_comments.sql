-- Migration: Sistema universal de comentarios
-- Description: Tabla genérica 'comments' para torneos, casinos, eventos y circuitos
-- Date: 2025-10-04
-- Author: Fran Moreno

-- 1. Crear enum para tipos de entidades
DO $$ BEGIN
    CREATE TYPE entity_type AS ENUM ('tournament', 'casino', 'event', 'tour');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- 2. Crear tabla comments
CREATE TABLE IF NOT EXISTS public.comments (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity_type entity_type NOT NULL,
    entity_id bigint NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    author_name text,
    content text NOT NULL CHECK (char_length(content) >= 3 AND char_length(content) <= 2000),
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    
    -- Constraint: o tiene user_id o tiene author_name, no ambos
    CONSTRAINT user_or_author CHECK (
        (user_id IS NOT NULL AND author_name IS NULL) OR
        (user_id IS NULL AND author_name IS NOT NULL)
    )
);

-- 3. Crear índices para mejorar rendimiento
CREATE INDEX IF NOT EXISTS idx_comments_entity ON public.comments(entity_type, entity_id);
CREATE INDEX IF NOT EXISTS idx_comments_user_id ON public.comments(user_id);
CREATE INDEX IF NOT EXISTS idx_comments_created_at ON public.comments(created_at);

-- 4. Habilitar Row Level Security (RLS)
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- 5. Eliminar políticas existentes si existen
DROP POLICY IF EXISTS "comments_select_public" ON public.comments;
DROP POLICY IF EXISTS "comments_insert_authenticated" ON public.comments;
DROP POLICY IF EXISTS "comments_update_own" ON public.comments;
DROP POLICY IF EXISTS "comments_delete_own" ON public.comments;

-- 6. Política: Todos pueden ver comentarios (lecturas públicas)
CREATE POLICY "comments_select_public"
    ON public.comments
    FOR SELECT
    TO public
    USING (true);

-- 7. Política: Usuarios autenticados y anónimos pueden insertar comentarios
CREATE POLICY "comments_insert_authenticated"
    ON public.comments
    FOR INSERT
    TO authenticated, anon
    WITH CHECK (
        (auth.uid() = user_id AND author_name IS NULL) OR
        (user_id IS NULL AND author_name IS NOT NULL)
    );

-- 8. Política: Solo el propietario puede actualizar su comentario
CREATE POLICY "comments_update_own"
    ON public.comments
    FOR UPDATE
    TO authenticated
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- 9. Política: Solo el propietario puede eliminar su comentario
CREATE POLICY "comments_delete_own"
    ON public.comments
    FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- 10. Otorgar permisos explícitos
GRANT SELECT ON public.comments TO anon, authenticated;
GRANT INSERT ON public.comments TO anon, authenticated;
GRANT UPDATE, DELETE ON public.comments TO authenticated;
GRANT USAGE, SELECT ON SEQUENCE public.comments_id_seq TO anon, authenticated;

-- 11. Crear función para actualizar automáticamente updated_at
CREATE OR REPLACE FUNCTION public.update_comments_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 12. Crear trigger para updated_at
DROP TRIGGER IF EXISTS trigger_comments_updated_at ON public.comments;
CREATE TRIGGER trigger_comments_updated_at
    BEFORE UPDATE ON public.comments
    FOR EACH ROW
    EXECUTE FUNCTION public.update_comments_updated_at();

-- 13. Comentarios para documentación
COMMENT ON TABLE public.comments IS 'Sistema universal de comentarios para torneos, casinos, eventos y circuitos. Soporta usuarios autenticados y anónimos.';
COMMENT ON COLUMN public.comments.entity_type IS 'Tipo de entidad: tournament, casino, event o tour';
COMMENT ON COLUMN public.comments.entity_id IS 'ID de la entidad comentada (referencia polimórfica)';
COMMENT ON COLUMN public.comments.user_id IS 'ID del usuario autenticado (null para comentarios anónimos)';
COMMENT ON COLUMN public.comments.author_name IS 'Nombre del autor para comentarios anónimos (null si user_id existe)';
COMMENT ON COLUMN public.comments.content IS 'Contenido del comentario (3-2000 caracteres)';
COMMENT ON COLUMN public.comments.updated_at IS 'Fecha y hora de la última actualización del comentario';

