-- Migración para crear tablas de favoritos de eventos y circuitos (tours)

-- ========================================
-- TABLA: event_stars
-- ========================================

CREATE TABLE IF NOT EXISTS public.event_stars (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    event_id bigint REFERENCES public."Event"(id) ON DELETE CASCADE NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT unique_user_event UNIQUE (user_id, event_id)
);

-- Índices para event_stars
CREATE INDEX IF NOT EXISTS idx_event_stars_user_id ON public.event_stars(user_id);
CREATE INDEX IF NOT EXISTS idx_event_stars_event_id ON public.event_stars(event_id);
CREATE INDEX IF NOT EXISTS idx_event_stars_user_id_event_id ON public.event_stars(user_id, event_id);
CREATE INDEX IF NOT EXISTS idx_event_stars_created_at ON public.event_stars(created_at DESC);

-- Habilitar Row Level Security (RLS) en event_stars
ALTER TABLE public.event_stars ENABLE ROW LEVEL SECURITY;

-- Políticas RLS para event_stars
CREATE POLICY "Authenticated users can view event_stars"
    ON public.event_stars
    FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can insert their own favorite events"
    ON public.event_stars
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own favorite events"
    ON public.event_stars
    FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- Permisos para event_stars
GRANT ALL ON TABLE public.event_stars TO postgres;
GRANT ALL ON TABLE public.event_stars TO anon, authenticated, service_role;
GRANT USAGE, SELECT ON SEQUENCE public.event_stars_id_seq TO anon, authenticated, service_role;

-- Comentarios para event_stars
COMMENT ON TABLE public.event_stars IS 'Tabla para gestionar los eventos marcados como favoritos por los usuarios';
COMMENT ON COLUMN public.event_stars.user_id IS 'ID del usuario que marcó el evento como favorito';
COMMENT ON COLUMN public.event_stars.event_id IS 'ID del evento marcado como favorito';
COMMENT ON CONSTRAINT unique_user_event ON public.event_stars IS 'Evita que un usuario marque el mismo evento como favorito múltiples veces';

-- ========================================
-- TABLA: tour_stars
-- ========================================

CREATE TABLE IF NOT EXISTS public.tour_stars (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    tour_id bigint REFERENCES public."Tour"(id) ON DELETE CASCADE NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT unique_user_tour UNIQUE (user_id, tour_id)
);

-- Índices para tour_stars
CREATE INDEX IF NOT EXISTS idx_tour_stars_user_id ON public.tour_stars(user_id);
CREATE INDEX IF NOT EXISTS idx_tour_stars_tour_id ON public.tour_stars(tour_id);
CREATE INDEX IF NOT EXISTS idx_tour_stars_user_id_tour_id ON public.tour_stars(user_id, tour_id);
CREATE INDEX IF NOT EXISTS idx_tour_stars_created_at ON public.tour_stars(created_at DESC);

-- Habilitar Row Level Security (RLS) en tour_stars
ALTER TABLE public.tour_stars ENABLE ROW LEVEL SECURITY;

-- Políticas RLS para tour_stars
CREATE POLICY "Authenticated users can view tour_stars"
    ON public.tour_stars
    FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can insert their own favorite tours"
    ON public.tour_stars
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own favorite tours"
    ON public.tour_stars
    FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- Permisos para tour_stars
GRANT ALL ON TABLE public.tour_stars TO postgres;
GRANT ALL ON TABLE public.tour_stars TO anon, authenticated, service_role;
GRANT USAGE, SELECT ON SEQUENCE public.tour_stars_id_seq TO anon, authenticated, service_role;

-- Comentarios para tour_stars
COMMENT ON TABLE public.tour_stars IS 'Tabla para gestionar los circuitos (tours) marcados como favoritos por los usuarios';
COMMENT ON COLUMN public.tour_stars.user_id IS 'ID del usuario que marcó el circuito como favorito';
COMMENT ON COLUMN public.tour_stars.tour_id IS 'ID del circuito marcado como favorito';
COMMENT ON CONSTRAINT unique_user_tour ON public.tour_stars IS 'Evita que un usuario marque el mismo circuito como favorito múltiples veces';

-- ========================================
-- VERIFICACIÓN FINAL
-- ========================================

DO $$
BEGIN
    RAISE NOTICE 'Tablas event_stars y tour_stars creadas exitosamente con RLS y constraints UNIQUE';
END $$;
